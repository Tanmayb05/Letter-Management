package Letter.Management;

import static Letter.Management.ClerkLogin.setUIFont;
import java.awt.Dimension;
import java.awt.Font;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;


/**
 *
 * @author Lenovo
 */
public class AdminHome extends javax.swing.JFrame {

    /**
     * Creates new form ClerkAddLetter
     */
    public AdminHome() {
        initComponents();
        initFrame();
        initShowRegister();
        initToBranchComboBox();
        ShowRegisterButton.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        HeadingPanel = new javax.swing.JPanel();
        HeadingLabel = new javax.swing.JLabel();
        AddLetterPanel = new javax.swing.JPanel();
        ActionButtonsPanel = new javax.swing.JPanel();
        SignoutButton = new javax.swing.JButton();
        AddLetterButton = new javax.swing.JButton();
        ShowRegisterButton = new javax.swing.JToggleButton();
        EmployeeStatsButton = new javax.swing.JToggleButton();
        ExportButton = new javax.swing.JButton();
        ShowButton = new javax.swing.JButton();
        ShowRegisterPanel = new javax.swing.JPanel();
        ShowRegisterSortByComboBox = new javax.swing.JComboBox<>();
        updownArrowToggleButton = new javax.swing.JToggleButton();
        EmployeeStatsOptions = new javax.swing.JPanel();
        NameEmployeeStatsComboBox = new javax.swing.JComboBox<>();
        BranchEmployeeStatsComboBox = new javax.swing.JComboBox<>();
        SortByEmployeeStatsComboBox = new javax.swing.JComboBox<>();
        EmployeeStatsFilterPeriodPanel = new javax.swing.JPanel();
        FromPeriodField = new javax.swing.JTextField();
        ToPeriodField = new javax.swing.JTextField();
        ToPeriodLabel = new javax.swing.JLabel();
        SubjectPanel1 = new javax.swing.JPanel();
        RemarkLabel = new javax.swing.JLabel();
        RemarkField = new javax.swing.JTextField();
        OutDateLabel = new javax.swing.JLabel();
        OutDateField = new javax.swing.JTextField();
        OutDateShowTodayButton = new javax.swing.JButton();
        ProgressLabel = new javax.swing.JLabel();
        ProgressField = new javax.swing.JTextField();
        ToPanel = new javax.swing.JPanel();
        ToNameLabel = new javax.swing.JLabel();
        ToBranchLabel = new javax.swing.JLabel();
        ToDateReceivedLabel = new javax.swing.JLabel();
        ToDateReceivedField = new javax.swing.JTextField();
        DateReceivedShowTodayButton = new javax.swing.JButton();
        ToBranchComboBox = new javax.swing.JComboBox<>();
        ToNameComboBox = new javax.swing.JComboBox<>();
        SubjectPanel = new javax.swing.JPanel();
        SubjectLabel = new javax.swing.JLabel();
        SubjectField = new javax.swing.JTextField();
        FromPanel = new javax.swing.JPanel();
        FromLetterNoLabel = new javax.swing.JLabel();
        FromLetterNoField = new javax.swing.JTextField();
        FromDateLabel = new javax.swing.JLabel();
        FromDateField = new javax.swing.JTextField();
        FromNameLabel = new javax.swing.JLabel();
        DateSentShowTodayButton = new javax.swing.JButton();
        FromNameField = new javax.swing.JTextField();
        ToDateReceivedLabel2 = new javax.swing.JLabel();
        InwardRegisterNumberPanel = new javax.swing.JPanel();
        WorksheetNoLabel = new javax.swing.JLabel();
        InwardRegisterNoField1 = new javax.swing.JTextField();
        ShowLetterInfoButton1 = new javax.swing.JButton();
        InwardRegisterNoLabel1 = new javax.swing.JLabel();
        WorksheetNoField = new javax.swing.JTextField();
        TablePanel = new javax.swing.JPanel();
        TablesPane = new javax.swing.JTabbedPane();
        ShowDirectoryScrollPane = new javax.swing.JScrollPane();
        ShowRegisterTable = new javax.swing.JTable();
        EmployeeStatsPane = new javax.swing.JPanel();
        EmployeeStatsScrollPane = new javax.swing.JScrollPane();
        EmployeeStatsTable = new javax.swing.JTable();
        TasksScrollPane = new javax.swing.JScrollPane();
        TasksTable = new javax.swing.JTable();
        RefreshShowRegisterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 1000, 640));
        setMinimumSize(new java.awt.Dimension(1000, 640));
        setName("Clerk Home"); // NOI18N
        setSize(new java.awt.Dimension(1000, 640));

        HeaderPanel.setBackground(new java.awt.Color(225, 250, 225));
        HeaderPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        HeadingPanel.setBackground(new java.awt.Color(147, 217, 163));
        HeadingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        HeadingLabel.setBackground(new java.awt.Color(147, 217, 163));
        HeadingLabel.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        HeadingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeadingLabel.setText("प्रशासक");

        javax.swing.GroupLayout HeadingPanelLayout = new javax.swing.GroupLayout(HeadingPanel);
        HeadingPanel.setLayout(HeadingPanelLayout);
        HeadingPanelLayout.setHorizontalGroup(
            HeadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeadingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        HeadingPanelLayout.setVerticalGroup(
            HeadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeadingPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(HeadingLabel)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout HeaderPanelLayout = new javax.swing.GroupLayout(HeaderPanel);
        HeaderPanel.setLayout(HeaderPanelLayout);
        HeaderPanelLayout.setHorizontalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeadingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        HeaderPanelLayout.setVerticalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HeaderPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(HeadingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        AddLetterPanel.setBackground(new java.awt.Color(225, 250, 225));
        AddLetterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ActionButtonsPanel.setBackground(new java.awt.Color(225, 250, 225));

        SignoutButton.setBackground(new java.awt.Color(255, 102, 102));
        SignoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img-src/logout24.png"))); // NOI18N
        SignoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignoutButtonActionPerformed(evt);
            }
        });

        AddLetterButton.setBackground(new java.awt.Color(102, 255, 102));
        AddLetterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img-src/Add24.png"))); // NOI18N
        AddLetterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLetterButtonActionPerformed(evt);
            }
        });

        ShowRegisterButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        ShowRegisterButton.setText("वही दाखवा");
        ShowRegisterButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ShowRegisterButtonStateChanged(evt);
            }
        });
        ShowRegisterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ShowRegisterButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ShowRegisterButtonMouseExited(evt);
            }
        });
        ShowRegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowRegisterButtonActionPerformed(evt);
            }
        });

        EmployeeStatsButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        EmployeeStatsButton.setText("कर्मचारी आकडेवारी");
        EmployeeStatsButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                EmployeeStatsButtonStateChanged(evt);
            }
        });
        EmployeeStatsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EmployeeStatsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                EmployeeStatsButtonMouseExited(evt);
            }
        });

        ExportButton.setText("निर्यात करा");
        ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportButtonActionPerformed(evt);
            }
        });

        ShowButton.setBackground(new java.awt.Color(255, 255, 255));
        ShowButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        ShowButton.setText("दाखवा");
        ShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ActionButtonsPanelLayout = new javax.swing.GroupLayout(ActionButtonsPanel);
        ActionButtonsPanel.setLayout(ActionButtonsPanelLayout);
        ActionButtonsPanelLayout.setHorizontalGroup(
            ActionButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ActionButtonsPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(SignoutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(AddLetterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(ShowRegisterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(EmployeeStatsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(ShowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(ExportButton)
                .addContainerGap())
        );
        ActionButtonsPanelLayout.setVerticalGroup(
            ActionButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ActionButtonsPanelLayout.createSequentialGroup()
                .addGroup(ActionButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SignoutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddLetterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShowRegisterButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EmployeeStatsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShowButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        ShowRegisterPanel.setBackground(new java.awt.Color(225, 250, 225));

        ShowRegisterSortByComboBox.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ShowRegisterSortByComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "क्रमाणे", "कार्यालयीन क्रमांक", "कार्यपत्र क्रमांक", "पत्र क्रमांक", "आवक दिनांक", "कोणाकडून आले", "विषय", "पाठवल्याचा दिनांक", "शाखा", "नाव", "जावक दिनांक", "प्रगती" }));
        ShowRegisterSortByComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowRegisterSortByComboBoxActionPerformed(evt);
            }
        });

        updownArrowToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img-src/arrow-down.png"))); // NOI18N
        updownArrowToggleButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updownArrowToggleButtonStateChanged(evt);
            }
        });
        updownArrowToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updownArrowToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowRegisterPanelLayout = new javax.swing.GroupLayout(ShowRegisterPanel);
        ShowRegisterPanel.setLayout(ShowRegisterPanelLayout);
        ShowRegisterPanelLayout.setHorizontalGroup(
            ShowRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowRegisterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ShowRegisterSortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updownArrowToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ShowRegisterPanelLayout.setVerticalGroup(
            ShowRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowRegisterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ShowRegisterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShowRegisterSortByComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(updownArrowToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        EmployeeStatsOptions.setBackground(new java.awt.Color(225, 250, 225));

        NameEmployeeStatsComboBox.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        NameEmployeeStatsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "नाव निवडा" }));
        NameEmployeeStatsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NameEmployeeStatsComboBoxItemStateChanged(evt);
            }
        });
        NameEmployeeStatsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameEmployeeStatsComboBoxActionPerformed(evt);
            }
        });

        BranchEmployeeStatsComboBox.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        BranchEmployeeStatsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "शाखा निवडा" }));
        BranchEmployeeStatsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BranchEmployeeStatsComboBoxActionPerformed(evt);
            }
        });

        SortByEmployeeStatsComboBox.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        SortByEmployeeStatsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "काळ", "गेला  आठवडा", "गेला महिना", "गेला वर्ष" }));
        SortByEmployeeStatsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByEmployeeStatsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmployeeStatsOptionsLayout = new javax.swing.GroupLayout(EmployeeStatsOptions);
        EmployeeStatsOptions.setLayout(EmployeeStatsOptionsLayout);
        EmployeeStatsOptionsLayout.setHorizontalGroup(
            EmployeeStatsOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeeStatsOptionsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(EmployeeStatsOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SortByEmployeeStatsComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BranchEmployeeStatsComboBox, 0, 250, Short.MAX_VALUE)
                    .addComponent(NameEmployeeStatsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        EmployeeStatsOptionsLayout.setVerticalGroup(
            EmployeeStatsOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeStatsOptionsLayout.createSequentialGroup()
                .addComponent(BranchEmployeeStatsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NameEmployeeStatsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SortByEmployeeStatsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        EmployeeStatsFilterPeriodPanel.setBackground(new java.awt.Color(225, 250, 225));

        FromPeriodField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        FromPeriodField.setText("dd-MM-yyyy");
        FromPeriodField.setToolTipText("From Date");
        FromPeriodField.setMinimumSize(new java.awt.Dimension(110, 30));
        FromPeriodField.setPreferredSize(new java.awt.Dimension(110, 30));
        FromPeriodField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FromPeriodFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                FromPeriodFieldFocusLost(evt);
            }
        });

        ToPeriodField.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        ToPeriodField.setText("dd-MM-yyyy");
        ToPeriodField.setToolTipText("To Date");
        ToPeriodField.setMinimumSize(new java.awt.Dimension(110, 30));
        ToPeriodField.setPreferredSize(new java.awt.Dimension(110, 30));
        ToPeriodField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ToPeriodFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ToPeriodFieldFocusLost(evt);
            }
        });

        ToPeriodLabel.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        ToPeriodLabel.setText("--");

        javax.swing.GroupLayout EmployeeStatsFilterPeriodPanelLayout = new javax.swing.GroupLayout(EmployeeStatsFilterPeriodPanel);
        EmployeeStatsFilterPeriodPanel.setLayout(EmployeeStatsFilterPeriodPanelLayout);
        EmployeeStatsFilterPeriodPanelLayout.setHorizontalGroup(
            EmployeeStatsFilterPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeStatsFilterPeriodPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(FromPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ToPeriodLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ToPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        EmployeeStatsFilterPeriodPanelLayout.setVerticalGroup(
            EmployeeStatsFilterPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeeStatsFilterPeriodPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(EmployeeStatsFilterPeriodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FromPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToPeriodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        SubjectPanel1.setBackground(new java.awt.Color(147, 217, 163));
        SubjectPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SubjectPanel1.setMinimumSize(new java.awt.Dimension(340, 48));

        RemarkLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        RemarkLabel.setText("टिपणी");
        RemarkLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        RemarkLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        RemarkLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        RemarkField.setNextFocusableComponent(ToDateReceivedField);

        OutDateLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        OutDateLabel.setText("जावक दिनांक");
        OutDateLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        OutDateLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        OutDateLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        OutDateField.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        OutDateField.setMinimumSize(new java.awt.Dimension(150, 30));
        OutDateField.setPreferredSize(new java.awt.Dimension(150, 30));

        OutDateShowTodayButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        OutDateShowTodayButton.setText("आजचा दिवस");
        OutDateShowTodayButton.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        OutDateShowTodayButton.setMinimumSize(new java.awt.Dimension(80, 25));
        OutDateShowTodayButton.setPreferredSize(new java.awt.Dimension(80, 25));
        OutDateShowTodayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutDateShowTodayButtonActionPerformed(evt);
            }
        });

        ProgressLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ProgressLabel.setText("प्रगती");
        ProgressLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        ProgressLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        ProgressLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        ProgressField.setNextFocusableComponent(ToDateReceivedField);

        javax.swing.GroupLayout SubjectPanel1Layout = new javax.swing.GroupLayout(SubjectPanel1);
        SubjectPanel1.setLayout(SubjectPanel1Layout);
        SubjectPanel1Layout.setHorizontalGroup(
            SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SubjectPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SubjectPanel1Layout.createSequentialGroup()
                        .addComponent(ProgressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ProgressField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubjectPanel1Layout.createSequentialGroup()
                        .addComponent(RemarkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemarkField, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SubjectPanel1Layout.createSequentialGroup()
                        .addComponent(OutDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OutDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(OutDateShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SubjectPanel1Layout.setVerticalGroup(
            SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SubjectPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OutDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(OutDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OutDateShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RemarkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RemarkField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SubjectPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ProgressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProgressField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        ToPanel.setBackground(new java.awt.Color(147, 217, 163));
        ToPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ToNameLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToNameLabel.setText("नाव");
        ToNameLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        ToNameLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        ToBranchLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToBranchLabel.setText("शाखा");
        ToBranchLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        ToBranchLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        ToDateReceivedLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToDateReceivedLabel.setText("मिळाल्याचा दिनांक");
        ToDateReceivedLabel.setMaximumSize(new java.awt.Dimension(100, 262626));
        ToDateReceivedLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        ToDateReceivedLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        ToDateReceivedField.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToDateReceivedField.setMinimumSize(new java.awt.Dimension(150, 30));
        ToDateReceivedField.setName(""); // NOI18N
        ToDateReceivedField.setPreferredSize(new java.awt.Dimension(150, 30));

        DateReceivedShowTodayButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        DateReceivedShowTodayButton.setText("आजचा दिवस");
        DateReceivedShowTodayButton.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        DateReceivedShowTodayButton.setMinimumSize(new java.awt.Dimension(100, 30));
        DateReceivedShowTodayButton.setPreferredSize(new java.awt.Dimension(100, 30));
        DateReceivedShowTodayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateReceivedShowTodayButtonActionPerformed(evt);
            }
        });

        ToBranchComboBox.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToBranchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "शाखा निवडा" }));
        ToBranchComboBox.setMinimumSize(new java.awt.Dimension(196, 32));
        ToBranchComboBox.setPreferredSize(new java.awt.Dimension(196, 32));
        ToBranchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToBranchComboBoxActionPerformed(evt);
            }
        });

        ToNameComboBox.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "नाव निवडा" }));
        ToNameComboBox.setMinimumSize(new java.awt.Dimension(196, 32));
        ToNameComboBox.setPreferredSize(new java.awt.Dimension(196, 32));

        javax.swing.GroupLayout ToPanelLayout = new javax.swing.GroupLayout(ToPanel);
        ToPanel.setLayout(ToPanelLayout);
        ToPanelLayout.setHorizontalGroup(
            ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ToNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ToBranchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ToDateReceivedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ToBranchComboBox, 0, 250, Short.MAX_VALUE)
                        .addComponent(ToNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ToPanelLayout.createSequentialGroup()
                        .addComponent(ToDateReceivedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DateReceivedShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        ToPanelLayout.setVerticalGroup(
            ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ToDateReceivedField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(DateReceivedShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(ToDateReceivedLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ToBranchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ToPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(ToBranchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ToNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        SubjectPanel.setBackground(new java.awt.Color(147, 217, 163));
        SubjectPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SubjectPanel.setMinimumSize(new java.awt.Dimension(340, 48));
        SubjectPanel.setPreferredSize(new java.awt.Dimension(340, 48));

        SubjectLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        SubjectLabel.setText("विषय");
        SubjectLabel.setMaximumSize(new java.awt.Dimension(100, 25));
        SubjectLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        SubjectLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        SubjectField.setNextFocusableComponent(ToDateReceivedField);

        javax.swing.GroupLayout SubjectPanelLayout = new javax.swing.GroupLayout(SubjectPanel);
        SubjectPanel.setLayout(SubjectPanelLayout);
        SubjectPanelLayout.setHorizontalGroup(
            SubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SubjectPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(SubjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SubjectPanelLayout.setVerticalGroup(
            SubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SubjectPanelLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(SubjectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        FromPanel.setBackground(new java.awt.Color(147, 217, 163));
        FromPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FromLetterNoLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromLetterNoLabel.setText("पत्र क्रमांक");
        FromLetterNoLabel.setToolTipText("From Number");
        FromLetterNoLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        FromLetterNoLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        FromLetterNoLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        FromLetterNoField.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromLetterNoField.setToolTipText("From Number");
        FromLetterNoField.setMinimumSize(new java.awt.Dimension(150, 25));
        FromLetterNoField.setPreferredSize(new java.awt.Dimension(150, 25));

        FromDateLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromDateLabel.setText("आवक दिनांक");
        FromDateLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        FromDateLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        FromDateLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        FromDateField.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromDateField.setMinimumSize(new java.awt.Dimension(150, 30));
        FromDateField.setPreferredSize(new java.awt.Dimension(150, 30));

        FromNameLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromNameLabel.setText("कोणाकडून आले");
        FromNameLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        FromNameLabel.setMinimumSize(new java.awt.Dimension(110, 25));
        FromNameLabel.setPreferredSize(new java.awt.Dimension(110, 25));

        DateSentShowTodayButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        DateSentShowTodayButton.setText("आजचा दिवस");
        DateSentShowTodayButton.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        DateSentShowTodayButton.setMinimumSize(new java.awt.Dimension(80, 25));
        DateSentShowTodayButton.setPreferredSize(new java.awt.Dimension(80, 25));
        DateSentShowTodayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSentShowTodayButtonActionPerformed(evt);
            }
        });

        FromNameField.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        FromNameField.setDragEnabled(true);
        FromNameField.setMargin(new java.awt.Insets(1, 1, 1, 1));
        FromNameField.setMinimumSize(new java.awt.Dimension(150, 25));
        FromNameField.setNextFocusableComponent(SubjectField);
        FromNameField.setPreferredSize(new java.awt.Dimension(150, 25));

        ToDateReceivedLabel2.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        ToDateReceivedLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ToDateReceivedLabel2.setText("आवक");
        ToDateReceivedLabel2.setMaximumSize(new java.awt.Dimension(100, 262626));
        ToDateReceivedLabel2.setMinimumSize(new java.awt.Dimension(100, 30));
        ToDateReceivedLabel2.setPreferredSize(new java.awt.Dimension(110, 30));

        javax.swing.GroupLayout FromPanelLayout = new javax.swing.GroupLayout(FromPanel);
        FromPanel.setLayout(FromPanelLayout);
        FromPanelLayout.setHorizontalGroup(
            FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToDateReceivedLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(FromDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FromNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(FromLetterNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FromLetterNoField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FromDateField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FromNameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(DateSentShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FromPanelLayout.setVerticalGroup(
            FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FromPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ToDateReceivedLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FromPanelLayout.createSequentialGroup()
                        .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FromLetterNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FromLetterNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FromDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(FromPanelLayout.createSequentialGroup()
                                .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DateSentShowTodayButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FromDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FromPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FromNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FromNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        InwardRegisterNumberPanel.setBackground(new java.awt.Color(147, 217, 163));
        InwardRegisterNumberPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        WorksheetNoLabel.setBackground(new java.awt.Color(102, 255, 102));
        WorksheetNoLabel.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        WorksheetNoLabel.setText("कार्यपत्र क्रमांक");
        WorksheetNoLabel.setMinimumSize(new java.awt.Dimension(176, 25));
        WorksheetNoLabel.setPreferredSize(new java.awt.Dimension(176, 25));

        ShowLetterInfoButton1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        ShowLetterInfoButton1.setText("दाखवा");
        ShowLetterInfoButton1.setMinimumSize(new java.awt.Dimension(59, 25));
        ShowLetterInfoButton1.setPreferredSize(new java.awt.Dimension(59, 25));
        ShowLetterInfoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowLetterInfoButton1ActionPerformed(evt);
            }
        });

        InwardRegisterNoLabel1.setBackground(new java.awt.Color(102, 255, 102));
        InwardRegisterNoLabel1.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        InwardRegisterNoLabel1.setText("कार्यालयीन अनुक्रमांक ");
        InwardRegisterNoLabel1.setToolTipText("Inward Register Number");
        InwardRegisterNoLabel1.setMinimumSize(new java.awt.Dimension(176, 25));
        InwardRegisterNoLabel1.setPreferredSize(new java.awt.Dimension(176, 25));

        javax.swing.GroupLayout InwardRegisterNumberPanelLayout = new javax.swing.GroupLayout(InwardRegisterNumberPanel);
        InwardRegisterNumberPanel.setLayout(InwardRegisterNumberPanelLayout);
        InwardRegisterNumberPanelLayout.setHorizontalGroup(
            InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InwardRegisterNumberPanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WorksheetNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InwardRegisterNoLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InwardRegisterNumberPanelLayout.createSequentialGroup()
                        .addComponent(InwardRegisterNoField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ShowLetterInfoButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(WorksheetNoField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        InwardRegisterNumberPanelLayout.setVerticalGroup(
            InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InwardRegisterNumberPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShowLetterInfoButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(InwardRegisterNoField1)
                    .addComponent(InwardRegisterNoLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InwardRegisterNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WorksheetNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WorksheetNoField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout AddLetterPanelLayout = new javax.swing.GroupLayout(AddLetterPanel);
        AddLetterPanel.setLayout(AddLetterPanelLayout);
        AddLetterPanelLayout.setHorizontalGroup(
            AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddLetterPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InwardRegisterNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(ActionButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AddLetterPanelLayout.createSequentialGroup()
                            .addComponent(ShowRegisterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(EmployeeStatsFilterPeriodPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EmployeeStatsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(29, 29, 29))
                        .addComponent(SubjectPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ToPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SubjectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                        .addComponent(FromPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        AddLetterPanelLayout.setVerticalGroup(
            AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddLetterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InwardRegisterNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(FromPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(SubjectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(ToPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(SubjectPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ActionButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddLetterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddLetterPanelLayout.createSequentialGroup()
                        .addComponent(EmployeeStatsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(EmployeeStatsFilterPeriodPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ShowRegisterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TablePanel.setBackground(new java.awt.Color(225, 250, 225));
        TablePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TablesPane.setBackground(new java.awt.Color(147, 217, 163));
        TablesPane.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        TablesPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablesPane.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        TablesPane.setOpaque(true);

        ShowRegisterTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        ShowRegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "क्रमांक", "कार्यपत्र", "पत्र क्रमांक", "आवक दिनांक", "कोणाकडून आले", "विषय", "पाठवल्याचा दिनांक", "शाखा", "नाव", "जावक दिनांक", "टिपणी", "प्रगती"
            }
        ));
        ShowRegisterTable.setFillsViewportHeight(true);
        ShowRegisterTable.setInheritsPopupMenu(true);
        ShowRegisterTable.setNextFocusableComponent(SubjectField);
        ShowRegisterTable.setRowHeight(25);
        ShowRegisterTable.setShowGrid(true);
        ShowRegisterTable.getTableHeader().setReorderingAllowed(false);
        ShowRegisterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowRegisterTableMouseClicked(evt);
            }
        });
        ShowDirectoryScrollPane.setViewportView(ShowRegisterTable);

        TablesPane.addTab("वही दाखवा", ShowDirectoryScrollPane);

        EmployeeStatsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        EmployeeStatsTable.setRowHeight(25);
        EmployeeStatsScrollPane.setViewportView(EmployeeStatsTable);

        TasksTable.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        TasksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Email", "Pending Letters", "Completed Letters", "Total Letters"
            }
        ));
        TasksTable.setRowHeight(25);
        TasksScrollPane.setViewportView(TasksTable);

        javax.swing.GroupLayout EmployeeStatsPaneLayout = new javax.swing.GroupLayout(EmployeeStatsPane);
        EmployeeStatsPane.setLayout(EmployeeStatsPaneLayout);
        EmployeeStatsPaneLayout.setHorizontalGroup(
            EmployeeStatsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeStatsPaneLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(EmployeeStatsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmployeeStatsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addComponent(TasksScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        EmployeeStatsPaneLayout.setVerticalGroup(
            EmployeeStatsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeStatsPaneLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(EmployeeStatsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(TasksScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        TablesPane.addTab("कर्मचारी आकडेवारी", EmployeeStatsPane);

        RefreshShowRegisterButton.setText("Refresh");
        RefreshShowRegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshShowRegisterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TablePanelLayout = new javax.swing.GroupLayout(TablePanel);
        TablePanel.setLayout(TablePanelLayout);
        TablePanelLayout.setHorizontalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(TablesPane)
                .addGap(30, 30, 30))
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addComponent(RefreshShowRegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        TablePanelLayout.setVerticalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addComponent(RefreshShowRegisterButton)
                .addGap(4, 4, 4)
                .addComponent(TablesPane)
                .addGap(28, 28, 28))
        );

        TablesPane.getAccessibleContext().setAccessibleName("वही दाखवा");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(AddLetterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(HeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(HeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddLetterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AddLetterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLetterButtonActionPerformed
        // TODO add your handling code here:
        
        String InwardRegisterNo = InwardRegisterNoField1.getText();
        String WorksheetNo = WorksheetNoField.getText();
        String FromNo = FromLetterNoField.getText();
        String FromDate = FromDateField.getText();
        String FromName = FromNameField.getText();        
        String Subject = SubjectField.getText();
        String ToDateReceived = ToDateReceivedField.getText();
        String ToBranch = ToBranchComboBox.getSelectedItem().toString();
        String ToName = ToNameComboBox.getSelectedItem().toString();
        String OutDate = OutDateField.getText();
        String Remark = RemarkField.getText();
        String EmpID = getEmployeeID();
        String Progress = ProgressField.getText();
        
        try {
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "UPDATE letterinwardregister SET "
                        + "InwardNo = '"+InwardRegisterNo+"', "
                        + "WorksheetNo = '"+WorksheetNo+"', "
                        + "FromNo = '"+FromNo+"', "
                        + "FromDateSent = STR_TO_DATE('"+FromDate+"','%d-%m-%Y'), "
                        + "FromName = '"+FromName+"', "
                        + "Subject = '"+Subject+"', "
                        + "ToDateReceived = STR_TO_DATE('"+ToDateReceived+"','%d-%m-%Y'), "
                        + "ToBranch = '"+ToBranch+"', "
                        + "ToName = '"+ToName+"', "
                        + "OutDate = STR_TO_DATE('"+OutDate+"','%d-%m-%Y'), "
                        + "Remark = '"+Remark+"',"
                        + "EmpID = '"+EmpID+"', "
                        + "Progress = '"+Progress+"' "
                        + "WHERE InwardNo = '"+InwardRegisterNo+"'";
                        PreparedStatement st = con.c.prepareStatement(sql);
                        int i = st.executeUpdate();
                        if (i > 0){
                            JOptionPane.showMessageDialog(null, "Successfully Updated");
                        }
                        
        } catch(SQLException esql){
            esql.printStackTrace();
            JOptionPane.showMessageDialog(null, "Please Enter Inward Register Number.");
        } catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_AddLetterButtonActionPerformed

    private void SignoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignoutButtonActionPerformed
        // TODO add your handling code here:
        JLabel sure = new JLabel("बाहेर पडायचे आहे का?");
        sure.setFont(new Font("SanSerif", Font.PLAIN, 18));
        
        UIManager.put("OptionPane.buttonFont", new Font("SanSerif", Font.PLAIN, 15));
        
        Object[] options = {"हो","नाही"};
        int a = JOptionPane.showOptionDialog(null,
                sure,
                "साईन आउट",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
        if(a == JOptionPane.YES_OPTION){
            this.setVisible(false);
            new AdminLogin().setVisible(true);
        }  
    }//GEN-LAST:event_SignoutButtonActionPerformed

    private void DateSentShowTodayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSentShowTodayButtonActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String date = LocalDate.now().format(formatter);
        
        FromDateField.setText(date);
    }//GEN-LAST:event_DateSentShowTodayButtonActionPerformed

    private void ToBranchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToBranchComboBoxActionPerformed
        // TODO add your handling code here:
        initToNameComboBox();
    }//GEN-LAST:event_ToBranchComboBoxActionPerformed

    private void DateReceivedShowTodayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateReceivedShowTodayButtonActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String date = LocalDate.now().format(formatter);
        
        ToDateReceivedField.setText(date);
    }//GEN-LAST:event_DateReceivedShowTodayButtonActionPerformed

    private void ShowRegisterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowRegisterTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ShowRegisterTableMouseClicked

    private void BranchEmployeeStatsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BranchEmployeeStatsComboBoxActionPerformed
        // TODO add your handling code here:
        initNameEmployeeStatsComboBox();
        
    }//GEN-LAST:event_BranchEmployeeStatsComboBoxActionPerformed

    private void ShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowButtonActionPerformed
        // TODO add your handling code here:
        
        if (ShowRegisterButton.isSelected()) {
            
        }
        else if (EmployeeStatsButton.isSelected()) {
            initEmployeeStats();
            initTasks();
            
            if (!BranchEmployeeStatsComboBox.getSelectedItem().equals("शाखा निवडा") 
                    && !NameEmployeeStatsComboBox.getSelectedItem().equals("नाव निवडा")) {
                
                if (SortByEmployeeStatsComboBox.getSelectedItem().equals("काळ")) {
                    
                    if (FromPeriodField.getText().equals("dd-MM-yyyy") || ToPeriodField.getText().equals("dd-MM-yyyy")) {
                        initEmployeeStats();
                        initTasks();
                    }
                    else {
                        
                        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                        SimpleDateFormat sdfNew = new SimpleDateFormat("yyyy-MM-dd");
                        String from = null;
                        String to = null;

                        try {
                            Date fromDate = sdf.parse(FromPeriodField.getText());
                            Date toDate = sdf.parse(ToPeriodField.getText());
                            from = sdfNew.format(fromDate);
                            to = sdfNew.format(toDate);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }


                        initEmployeeStatsPeriodTable(from, to);
                        initTasks();
                    } 
                }
                else {
                    initEmployeeStats();
                    initTasks();
                }
            }
            else {
                initEmployeeStats();
                initTasks();
            }
            
        }
        
    }//GEN-LAST:event_ShowButtonActionPerformed

    
    private void NameEmployeeStatsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NameEmployeeStatsComboBoxItemStateChanged
        // TODO add your handling code here:
//        initEmployeeStats();
//        initTasks();
    }//GEN-LAST:event_NameEmployeeStatsComboBoxItemStateChanged

    private void SortByEmployeeStatsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByEmployeeStatsComboBoxActionPerformed
        // TODO add your handling code here:
        String period = SortByEmployeeStatsComboBox.getSelectedItem().toString();
        
        if (period.equals("Last Week")) {
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            DefaultTableModel EmployeeStatsTableModel  = new DefaultTableModel();
            EmployeeStatsTable.setModel(EmployeeStatsTableModel);
            EmployeeStatsTableModel.addColumn("Inward No");
            EmployeeStatsTableModel.addColumn("Worksheet");        
            EmployeeStatsTableModel.addColumn("From No");
            EmployeeStatsTableModel.addColumn("From Date");
            EmployeeStatsTableModel.addColumn("From Name");
            EmployeeStatsTableModel.addColumn("Subject");
            EmployeeStatsTableModel.addColumn("To Date");
            EmployeeStatsTableModel.addColumn("Out Date");
            EmployeeStatsTableModel.addColumn("Remark");
            EmployeeStatsTableModel.addColumn("Progress");
    //        EmployeeStatsTableModel.addColumn("Days");

            ShowRegisterTable.getTableHeader().setPreferredSize(
                new Dimension(ShowRegisterTable.getColumnModel().getTotalColumnWidth(), 28));

            String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
            String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();

            try {


                ConnectionEstablish con = new ConnectionEstablish();
                String sql = "SELECT * FROM letterinwardregister "
                        + "WHERE ToBranch = '"+branch+"' AND "
                        + "ToName = '"+toName+"' AND "
                        + "ToDateReceived> now() -  interval 7 day";
                PreparedStatement st = con.c.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while(rs.next()) {
                    String InwardNo = rs.getString("InwardNo");
                    String WorksheetNo = rs.getString("WorksheetNo");
                    String FromNo = rs.getString("FromNo");
                    String FromDateSent = rs.getString("FromDateSent");
                    String FromName = rs.getString("FromName");
                    String Subject = rs.getString("Subject");
                    String ToDateReceived = rs.getString("ToDateReceived");
                    String OutDate = rs.getString("OutDate");
                    String Remark = rs.getString("Remark");
                    String Progress = rs.getString("Progress");
    //                String Days = rs.getString("Days");

                    String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, FromName, 
                        Subject, ToDateReceived, OutDate, Remark, Progress};

                    EmployeeStatsTableModel.addRow(tableData);
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        else if (period.equals("Last Month")) {
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            DefaultTableModel EmployeeStatsTableModel  = new DefaultTableModel();
            EmployeeStatsTable.setModel(EmployeeStatsTableModel);
            EmployeeStatsTableModel.addColumn("Inward No");
            EmployeeStatsTableModel.addColumn("Worksheet");        
            EmployeeStatsTableModel.addColumn("From No");
            EmployeeStatsTableModel.addColumn("From Date");
            EmployeeStatsTableModel.addColumn("From Name");
            EmployeeStatsTableModel.addColumn("Subject");
            EmployeeStatsTableModel.addColumn("To Date");
            EmployeeStatsTableModel.addColumn("Out Date");
            EmployeeStatsTableModel.addColumn("Remark");
            EmployeeStatsTableModel.addColumn("Progress");
    //        EmployeeStatsTableModel.addColumn("Days");

            ShowRegisterTable.getTableHeader().setPreferredSize(
                new Dimension(ShowRegisterTable.getColumnModel().getTotalColumnWidth(), 28));

            String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
            String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();

            try {


                ConnectionEstablish con = new ConnectionEstablish();
                String sql = "SELECT * FROM letterinwardregister "
                        + "WHERE ToBranch = '"+branch+"' AND "
                        + "ToName = '"+toName+"' AND "
                        + "ToDateReceived> now() -  interval 31 day";
                PreparedStatement st = con.c.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while(rs.next()) {
                    String InwardNo = rs.getString("InwardNo");
                    String WorksheetNo = rs.getString("WorksheetNo");
                    String FromNo = rs.getString("FromNo");
                    String FromDateSent = rs.getString("FromDateSent");
                    String FromName = rs.getString("FromName");
                    String Subject = rs.getString("Subject");
                    String ToDateReceived = rs.getString("ToDateReceived");
                    String OutDate = rs.getString("OutDate");
                    String Remark = rs.getString("Remark");
                    String Progress = rs.getString("Progress");
    //                String Days = rs.getString("Days");

                    String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, FromName, 
                        Subject, ToDateReceived, OutDate, Remark, Progress};

                    EmployeeStatsTableModel.addRow(tableData);
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        else if (period.equals("Last Year")) {
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            DefaultTableModel EmployeeStatsTableModel  = new DefaultTableModel();
            EmployeeStatsTable.setModel(EmployeeStatsTableModel);
            EmployeeStatsTableModel.addColumn("Inward No");
            EmployeeStatsTableModel.addColumn("Worksheet");        
            EmployeeStatsTableModel.addColumn("From No");
            EmployeeStatsTableModel.addColumn("From Date");
            EmployeeStatsTableModel.addColumn("From Name");
            EmployeeStatsTableModel.addColumn("Subject");
            EmployeeStatsTableModel.addColumn("To Date");
            EmployeeStatsTableModel.addColumn("Out Date");
            EmployeeStatsTableModel.addColumn("Remark");
            EmployeeStatsTableModel.addColumn("Progress");
    //        EmployeeStatsTableModel.addColumn("Days");

            ShowRegisterTable.getTableHeader().setPreferredSize(
                new Dimension(ShowRegisterTable.getColumnModel().getTotalColumnWidth(), 28));

            String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
            String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();

            try {


                ConnectionEstablish con = new ConnectionEstablish();
                String sql = "SELECT * FROM letterinwardregister "
                        + "WHERE ToBranch = '"+branch+"' AND "
                        + "ToName = '"+toName+"' AND "
                        + "ToDateReceived> now() -  interval 365 day";
                PreparedStatement st = con.c.prepareStatement(sql);
                ResultSet rs = st.executeQuery();

                while(rs.next()) {
                    String InwardNo = rs.getString("InwardNo");
                    String WorksheetNo = rs.getString("WorksheetNo");
                    String FromNo = rs.getString("FromNo");
                    String FromDateSent = rs.getString("FromDateSent");
                    String FromName = rs.getString("FromName");
                    String Subject = rs.getString("Subject");
                    String ToDateReceived = rs.getString("ToDateReceived");
                    String OutDate = rs.getString("OutDate");
                    String Remark = rs.getString("Remark");
                    String Progress = rs.getString("Progress");
    //                String Days = rs.getString("Days");

                    String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, FromName, 
                        Subject, ToDateReceived, OutDate, Remark, Progress};

                    EmployeeStatsTableModel.addRow(tableData);
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        else if (period.equals("Select Period")) {
            EmployeeStatsFilterPeriodPanel.setVisible(true);
        }
    }//GEN-LAST:event_SortByEmployeeStatsComboBoxActionPerformed

    private void NameEmployeeStatsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameEmployeeStatsComboBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_NameEmployeeStatsComboBoxActionPerformed

    private void ShowRegisterSortByComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowRegisterSortByComboBoxActionPerformed
        // TODO add your handling code here:
        String sortBy = ShowRegisterSortByComboBox.getSelectedItem().toString();
        updownArrowToggleButton.setVisible(true);
                
        if (sortBy.equals("कार्यालयीन क्रमांक")) {
            sortRegister("InwardNo", "DESC");
        }
        else if (sortBy.equals("कार्यपत्र क्रमांक")) {
            sortRegister("WorksheetNo", "DESC");
        }
        else if (sortBy.equals("पत्र क्रमांक")) {
            sortRegister("FromNo", "DESC");
        }
        else if (sortBy.equals("आवक दिनांक")) {
            sortRegister("FromDateSent", "DESC");
        }
        else if (sortBy.equals("कोणाकडून आले")) {
            sortRegister("FromName", "DESC");
        }
        else if (sortBy.equals("विषय")) {
            sortRegister("Subject", "DESC");
        }
        else if (sortBy.equals("पाठवल्याचा दिनांक")) {
            sortRegister("ToDateReceived", "DESC");
        }
        else if (sortBy.equals("शाखा")) {
            sortRegister("ToBranch", "DESC");
        }
        else if (sortBy.equals("नाव")) {
            sortRegister("ToName", "DESC");
        }
        else if (sortBy.equals("जावक दिनांक")) {
            sortRegister("OutDate", "DESC");
        }
        else if (sortBy.equals("प्रगती")) {
            sortRegister("Progress", "DESC");
        }
    }//GEN-LAST:event_ShowRegisterSortByComboBoxActionPerformed

    private void updownArrowToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updownArrowToggleButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updownArrowToggleButtonActionPerformed

    private void updownArrowToggleButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updownArrowToggleButtonStateChanged
        // TODO add your handling code here:
        if (updownArrowToggleButton.isSelected()) {
            updownArrowToggleButton.setIcon(new ImageIcon(getClass().getResource("/img-src/arrow-up.png")));
            updownArrowToggleButton.setToolTipText("Ascending");
            String sortBy = ShowRegisterSortByComboBox.getSelectedItem().toString();
            
            if (sortBy.equals("कार्यालयीन क्रमांक")) {
                sortRegister("InwardNo", "ASC");
            }
            else if (sortBy.equals("कार्यपत्र क्रमांक")) {
                sortRegister("WorksheetNo", "ASC");
            }
            else if (sortBy.equals("पत्र क्रमांक")) {
                sortRegister("FromNo", "ASC");
            }
            else if (sortBy.equals("आवक दिनांक")) {
                sortRegister("FromDateSent", "ASC");
            }
            else if (sortBy.equals("कोणाकडून आले")) {
                sortRegister("FromName", "ASC");
            }
            else if (sortBy.equals("विषय")) {
                sortRegister("Subject", "ASC");
            }
            else if (sortBy.equals("पाठवल्याचा दिनांक")) {
                sortRegister("ToDateReceived", "ASC");
            }
            else if (sortBy.equals("शाखा")) {
                sortRegister("ToBranch", "ASC");
            }
            else if (sortBy.equals("नाव")) {
                sortRegister("ToName", "ASC");
            }
            else if (sortBy.equals("जावक दिनांक")) {
                sortRegister("OutDate", "ASC");
            }
            else if (sortBy.equals("प्रगती")) {
                sortRegister("Progress", "ASC");
            }
        }
        else {
            updownArrowToggleButton.setIcon(new ImageIcon(getClass().getResource("/img-src/arrow-down.png")));
            updownArrowToggleButton.setToolTipText("Descending");
            String sortBy = ShowRegisterSortByComboBox.getSelectedItem().toString();

            if (sortBy.equals("कार्यालयीन क्रमांक")) {
                sortRegister("InwardNo", "DESC");
            }
            else if (sortBy.equals("कार्यपत्र क्रमांक")) {
                sortRegister("WorksheetNo", "DESC");
            }
            else if (sortBy.equals("पत्र क्रमांक")) {
                sortRegister("FromNo", "DESC");
            }
            else if (sortBy.equals("आवक दिनांक")) {
                sortRegister("FromDateSent", "DESC");
            }
            else if (sortBy.equals("कोणाकडून आले")) {
                sortRegister("FromName", "DESC");
            }
            else if (sortBy.equals("विषय")) {
                sortRegister("Subject", "DESC");
            }
            else if (sortBy.equals("पाठवल्याचा दिनांक")) {
                sortRegister("ToDateReceived", "DESC");
            }
            else if (sortBy.equals("शाखा")) {
                sortRegister("ToBranch", "DESC");
            }
            else if (sortBy.equals("नाव")) {
                sortRegister("ToName", "DESC");
            }
            else if (sortBy.equals("जावक दिनांक")) {
                sortRegister("OutDate", "DESC");
            }
            else if (sortBy.equals("प्रगती")) {
                sortRegister("Progress", "DESC");
            }
        }
    }//GEN-LAST:event_updownArrowToggleButtonStateChanged

    private void ShowRegisterButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ShowRegisterButtonStateChanged
        // TODO add your handling code here:
        showRegisterToggleSwitch();
    }//GEN-LAST:event_ShowRegisterButtonStateChanged

    private void EmployeeStatsButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_EmployeeStatsButtonStateChanged
        // TODO add your handling code here:
        employeeStatsToggleSwitch();
    }//GEN-LAST:event_EmployeeStatsButtonStateChanged

    private void EmployeeStatsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeStatsButtonMouseEntered
        // TODO add your handling code here:
        employeeStatsToggleSwitchMouse();
    }//GEN-LAST:event_EmployeeStatsButtonMouseEntered

    private void EmployeeStatsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeStatsButtonMouseExited
        // TODO add your handling code here:
        employeeStatsToggleSwitchMouse();
    }//GEN-LAST:event_EmployeeStatsButtonMouseExited

    private void ShowRegisterButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowRegisterButtonMouseEntered
        // TODO add your handling code here:
        showRegisterToggleSwitchMouse();
    }//GEN-LAST:event_ShowRegisterButtonMouseEntered

    private void ShowRegisterButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowRegisterButtonMouseExited
        // TODO add your handling code here:
        showRegisterToggleSwitchMouse();
    }//GEN-LAST:event_ShowRegisterButtonMouseExited

    private void FromPeriodFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FromPeriodFieldFocusGained
        // TODO add your handling code here:
        if (FromPeriodField.getText().equals("dd-MM-yyyy")) {
            FromPeriodField.setText("");
        }
        
    }//GEN-LAST:event_FromPeriodFieldFocusGained

    private void FromPeriodFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FromPeriodFieldFocusLost
        // TODO add your handling code here:
        if (FromPeriodField.getText().equals("")) {
            FromPeriodField.setText("dd-MM-yyyy");
        }
    }//GEN-LAST:event_FromPeriodFieldFocusLost

    private void ToPeriodFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ToPeriodFieldFocusGained
        // TODO add your handling code here:
        if (ToPeriodField.getText().equals("dd-MM-yyyy")) {
            ToPeriodField.setText("");
        }
    }//GEN-LAST:event_ToPeriodFieldFocusGained

    private void ToPeriodFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ToPeriodFieldFocusLost
        // TODO add your handling code here:
        if (ToPeriodField.getText().equals("")) {
            ToPeriodField.setText("dd-MM-yyyy");
        }
    }//GEN-LAST:event_ToPeriodFieldFocusLost

    private void ShowRegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowRegisterButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ShowRegisterButtonActionPerformed

    private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportButtonActionPerformed
        // TODO add your handling code here:
        
        JFileChooser chooser = new JFileChooser(FileSystemView.getFileSystemView());
        chooser.setCurrentDirectory(new java.io.File("C:\\"));
        chooser.setDialogTitle("Choose a directory to export");
        chooser.setApproveButtonText("Save");
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        FileNameExtensionFilter restrict = new FileNameExtensionFilter(".csv files", "csv");
        chooser.addChoosableFileFilter(restrict);
        chooser.setAcceptAllFileFilterUsed(true);
        //   
        
        if (ShowRegisterButton.isSelected()) {
            
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {                
               
                try {
                    ConnectionEstablish con = new ConnectionEstablish();
                    String sql = "SELECT 'InwardNo','WorksheetNo','FromNo','FromDateSent','FromName',"
                            + "'Subject','ToDateReceived','ToBranch','ToName','EmpID',"
                            + "'OutDate','Remark','Progress' \n"
                            + "UNION SELECT * FROM letterinwardregister INTO OUTFILE "
                            + "'"+chooser.getSelectedFile().getPath().replace("\\","\\\\")+".csv' "
                            + "FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\r\\n'";
                    PreparedStatement st = con.c.prepareStatement(sql);
                    ResultSet rs = st.executeQuery();
                    JOptionPane.showMessageDialog(null, "Exported");
                    
                    
                    String csvFileAddress = chooser.getSelectedFile().getPath() + ".csv";
                    String xlsxFileAddress = chooser.getSelectedFile().getPath() + ".xlsx";
                    csvToXLSX(csvFileAddress, xlsxFileAddress);
                    
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            }
        }
        else if (EmployeeStatsButton.isSelected()) {
            
            if (!BranchEmployeeStatsComboBox.getSelectedItem().toString().equals("Select Branch")) {
                
                if (!NameEmployeeStatsComboBox.getSelectedItem().toString().equals("Select Name")) {
                    
                    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                        
                        try {
                            ConnectionEstablish con = new ConnectionEstablish();
                            String sql = "SELECT 'InwardNo','WorksheetNo','FromNo','FromDateSent','FromName',"
                                    + "'Subject','ToDateReceived','ToBranch','ToName','EmpID',"
                                    + "'OutDate','Remark','Progress' \n"
                                    + "UNION SELECT * FROM letterinwardregister "
                                    + "WHERE ToBranch='"+BranchEmployeeStatsComboBox.getSelectedItem()+"' "
                                    + "AND ToName = '"+NameEmployeeStatsComboBox.getSelectedItem()+"' "
                                    + "INTO OUTFILE "
                                    + "'"+chooser.getSelectedFile().getPath().replace("\\","\\\\")+".csv' "
                                    + "FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\\r\\n'";
                            PreparedStatement st = con.c.prepareStatement(sql);
                            ResultSet rs = st.executeQuery();

                            JOptionPane.showMessageDialog(null, "Exported");
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }

                    }
                    
                }
            }
            
        }
        

    }//GEN-LAST:event_ExportButtonActionPerformed

    public static void csvToXLSX(String csvFileAddress, String xlsxFileAddress) {
        try {
            
            System.out.println(csvFileAddress);
            XSSFWorkbook workBook = new XSSFWorkbook();
            XSSFSheet sheet = workBook.createSheet("sheet1");
            String currentLine=null;
            int RowNum=0;
            BufferedReader br = new BufferedReader(new FileReader(csvFileAddress));
            while ((currentLine = br.readLine()) != null) {
                String str[] = currentLine.split(",");
                RowNum++;
                XSSFRow currentRow=sheet.createRow(RowNum);
                for(int i=0;i<str.length;i++){
                    currentRow.createCell(i).setCellValue(str[i]);
                }
            }

            FileOutputStream fileOutputStream =  new FileOutputStream(xlsxFileAddress);
            workBook.write(fileOutputStream);
            fileOutputStream.close();
            System.out.println("Done");
        } catch (Exception ex) {
            System.out.println(ex.getMessage()+"Exception in try");
        }
    }
    
    private void ShowLetterInfoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowLetterInfoButton1ActionPerformed
        // TODO add your handling code here:

        initToBranchComboBox();
        
        try {
            // TODO add your handling code here:

            String InwardNo = InwardRegisterNoField1.getText();
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT *,date_format(FromDateSent,'%d-%m-%y') AS FDS, "
                    + "date_format(ToDateReceived,'%d-%m-%y') AS TDR, "
                    + "date_format(OutDate,'%d-%m-%y') AS OD "
                    + "FROM letterinwardregister WHERE InwardNo='"+InwardNo+"'";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            System.out.println(InwardNo);
            
            while(rs.next()){
                
                String WorksheetNo = rs.getString("WorksheetNo");
                String FromNo = rs.getString("FromNo");
                String FromDateSent = rs.getString("FDS");
                String FromName = rs.getString("FromName");
                String Subject = rs.getString("Subject");
                String ToDateReceived = rs.getString("TDR");
                String ToBranch = rs.getString("ToBranch");
                String ToName = rs.getString("ToName");
                String OutDate = rs.getString("OD");
                String Remark = rs.getString("Remark");
                String Progress = rs.getString("Progress");
                
                WorksheetNoField.setText(WorksheetNo);
                FromLetterNoField.setText(FromNo);
                FromDateField.setText(FromDateSent);
                FromNameField.setText(FromName);
                SubjectField.setText(Subject);
                ToDateReceivedField.setText(ToDateReceived);
                ToBranchComboBox.setSelectedItem(ToBranch);
                initToNameComboBox();
                ToNameComboBox.setSelectedItem(ToName);
                OutDateField.setText(OutDate);
                RemarkField.setText(Remark);
                ProgressField.setText(Progress);
                
            }
          
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ShowLetterInfoButton1ActionPerformed

    private void OutDateShowTodayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutDateShowTodayButtonActionPerformed
        // TODO add your handling code here:
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String date = LocalDate.now().format(formatter);
        
        OutDateField.setText(date);
        
    }//GEN-LAST:event_OutDateShowTodayButtonActionPerformed

    private void RefreshShowRegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshShowRegisterButtonActionPerformed
        // TODO add your handling code here:
        initShowRegister();
    }//GEN-LAST:event_RefreshShowRegisterButtonActionPerformed
    
    private void sortRegister(String parameter, String order) {
        DefaultTableModel ShowRegisterTableModel  = new DefaultTableModel();
        ShowRegisterTable.setModel(ShowRegisterTableModel);
        ShowRegisterTableModel.addColumn("क्रमांक");
        ShowRegisterTableModel.addColumn("कार्यपत्र");
        ShowRegisterTableModel.addColumn("<html>पत्र \nक्रमांक</html>");
        ShowRegisterTableModel.addColumn("<html>आवक \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("<html>कोणाकडून \nआले</html>");
        ShowRegisterTableModel.addColumn("विषय");
        ShowRegisterTableModel.addColumn("<html>पाठवल्याचा \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("शाखा");
        ShowRegisterTableModel.addColumn("नाव");
        ShowRegisterTableModel.addColumn("<html>जावक \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("टिपणी");
        ShowRegisterTableModel.addColumn("प्रगती");
        
        ShowRegisterTable.getTableHeader().setPreferredSize(
            new Dimension(ShowRegisterTable.getColumnModel().getTotalColumnWidth(), 32));
        
        ShowRegisterTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        ShowRegisterTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        ShowRegisterTable.getColumnModel().getColumn(2).setPreferredWidth(35);
        
//        DATES
        ShowRegisterTable.getColumnModel().getColumn(3).setPreferredWidth(60);
        
        ShowRegisterTable.getColumnModel().getColumn(4).setPreferredWidth(70);
        
        ShowRegisterTable.getColumnModel().getColumn(6).setPreferredWidth(60);
        ShowRegisterTable.getColumnModel().getColumn(9).setPreferredWidth(60);
        
        ShowRegisterTable.getColumnModel().getColumn(11).setPreferredWidth(50);
        
        try {
            
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT *,date_format(FromDateSent,'%d-%m-%y') AS FDS, "
                    + "date_format(ToDateReceived,'%d-%m-%y') AS TDR, "
                    + "date_format(OutDate,'%d-%m-%y') AS OD "
                    + "FROM letterinwardregister "
                    + "ORDER BY "+parameter+" "+order;
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()) {
                String InwardNo = rs.getString("InwardNo");
                String WorksheetNo = rs.getString("WorksheetNo");
                String FromNo = rs.getString("FromNo");
                String FromDateSent = rs.getString("FDS");
                String FromName = rs.getString("FromName");
                String Subject = rs.getString("Subject");
                String ToDateReceived = rs.getString("TDR");
                String ToBranch = rs.getString("ToBranch");
                String ToName = rs.getString("ToName");
                String OutDate = rs.getString("OD");
                String Remark = rs.getString("Remark");
                String Progress = rs.getString("Progress");
                
                String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, 
                    FromName, Subject, ToDateReceived, ToBranch, ToName, OutDate, Remark, Progress};
            
                ShowRegisterTableModel.addRow(tableData);
                
            }
            
//            ShowRegisterTable.setAutoCreateRowSorter(true);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private String getEmployeeID(){
        
        String branch = ToBranchComboBox.getSelectedItem().toString();
        String name = ToNameComboBox.getSelectedItem().toString();
        try{
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT ID FROM letteremployee WHERE "
                        + "Branch='"+branch+"' AND Name='"+name+"';";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String EmpID = rs.getString("ID");
                return EmpID;
            }
            
        } catch (Exception e){
            e.printStackTrace();
        }
        return "null";
    }
    
    /**
     * @param args the command line arguments
     */
    
    
    private void initFrame() {
        setExtendedState(MAXIMIZED_BOTH);
        setUIFont (new javax.swing.plaf.FontUIResource("SansSerif",Font.PLAIN,12));
        
        URL iconURL = getClass().getResource("/img-src/logo.png");
        // iconURL is null when not found
        ImageIcon icon = new ImageIcon(iconURL);
        setIconImage(icon.getImage());
        setTitle("जलसंपदा विभाग, महाराष्ट्र शासन, भारत");
        
        TablesPane.setVisible(false);
        EmployeeStatsOptions.setVisible(false);
        EmployeeStatsFilterPeriodPanel.setVisible(false);
        ShowRegisterPanel.setVisible(false);
                
    }
    
    private void initToBranchComboBox() {
        
        ToBranchComboBox.removeAllItems();
        ToBranchComboBox.addItem("शाखा निवडा");
        BranchEmployeeStatsComboBox.removeAllItems();
        BranchEmployeeStatsComboBox.addItem("शाखा निवडा");
        
        try {

            // SQL command data stored in String datatype
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "select DISTINCT Branch from letteremployee";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            // Condition check
            while (rs.next()) {
                ToBranchComboBox.addItem(rs.getString("Branch"));
                BranchEmployeeStatsComboBox.addItem(rs.getString("Branch"));
            }
            
        }   catch (SQLException e) {
            // Print exception pop-up on screen
            System.out.println(e);
            }
    }
    
    private void initToNameComboBox() {
        
        ToNameComboBox.removeAllItems();
        ToNameComboBox.addItem("नाव निवडा");
        
        try {

            ConnectionEstablish con = new ConnectionEstablish();
            // SQL command data stored in String datatype
            String sql = "select * from letteremployee WHERE Branch=? ORDER BY Name";
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1,(String) ToBranchComboBox.getSelectedItem());
            ResultSet rs = st.executeQuery();
            

            // Condiion check
            while (rs.next()) {
                String name = rs.getString("Name");                
                ToNameComboBox.addItem(name);
            }
            
        }   catch (SQLException e) {
            // Print exception pop-up on screen
            System.out.println(e);
            }
    }
    
    private void initNameEmployeeStatsComboBox() {
        
        NameEmployeeStatsComboBox.removeAllItems();
        NameEmployeeStatsComboBox.addItem("नाव निवडा");
        
        try {

            ConnectionEstablish con = new ConnectionEstablish();
            // SQL command data stored in String datatype
            String sql = "select * from letteremployee WHERE Branch=? ORDER BY Name";
            PreparedStatement st = con.c.prepareStatement(sql);
            st.setString(1,(String) BranchEmployeeStatsComboBox.getSelectedItem());
            ResultSet rs = st.executeQuery();
            

            // Condiion check
            while (rs.next()) {
                String name = rs.getString("Name");                
                NameEmployeeStatsComboBox.addItem(name);
            }
            
        }   catch (SQLException e) {
            // Print exception pop-up on screen
            System.out.println(e);
            }
    }
    
    private void initShowRegister() {
        
        DefaultTableModel ShowRegisterTableModel  = new DefaultTableModel();
        ShowRegisterTable.setModel(ShowRegisterTableModel);
        ShowRegisterTableModel.addColumn("क्रमांक");
        ShowRegisterTableModel.addColumn("कार्यपत्र");
        ShowRegisterTableModel.addColumn("<html>पत्र \nक्रमांक</html>");
        ShowRegisterTableModel.addColumn("<html>आवक \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("<html>कोणाकडून \nआले</html>");
        ShowRegisterTableModel.addColumn("विषय");
        ShowRegisterTableModel.addColumn("<html>पाठवल्याचा \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("शाखा");
        ShowRegisterTableModel.addColumn("नाव");
        ShowRegisterTableModel.addColumn("<html>जावक \nदिनांक</html>");
        ShowRegisterTableModel.addColumn("टिपणी");
        ShowRegisterTableModel.addColumn("प्रगती");
        
        ShowRegisterTable.getTableHeader().setPreferredSize(
            new Dimension(ShowRegisterTable.getColumnModel().getTotalColumnWidth(), 32));
        
        ShowRegisterTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        ShowRegisterTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        ShowRegisterTable.getColumnModel().getColumn(2).setPreferredWidth(35);
        
//        DATES
        ShowRegisterTable.getColumnModel().getColumn(3).setPreferredWidth(60);
        
        ShowRegisterTable.getColumnModel().getColumn(4).setPreferredWidth(70);
        
        ShowRegisterTable.getColumnModel().getColumn(6).setPreferredWidth(60);
        ShowRegisterTable.getColumnModel().getColumn(9).setPreferredWidth(60);
        
        ShowRegisterTable.getColumnModel().getColumn(11).setPreferredWidth(50);
        
        try {
            
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT *,date_format(FromDateSent,'%d-%m-%y') AS FDS, "
                    + "date_format(ToDateReceived,'%d-%m-%y') AS TDR, "
                    + "date_format(OutDate,'%d-%m-%y') AS OD "
                    + "FROM letterinwardregister";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()) {
                String InwardNo = rs.getString("InwardNo");
                String WorksheetNo = rs.getString("WorksheetNo");
                String FromNo = rs.getString("FromNo");
                String FromDateSent = rs.getString("FDS");
                String FromName = rs.getString("FromName");
                String Subject = rs.getString("Subject");
                String ToDateReceived = rs.getString("TDR");
                String ToBranch = rs.getString("ToBranch");
                String ToName = rs.getString("ToName");
                String OutDate = rs.getString("OD");
                String Remark = rs.getString("Remark");
                String Progress = rs.getString("Progress");
                
                String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, 
                    FromName, Subject, ToDateReceived, ToBranch, ToName, OutDate, Remark, Progress};
            
                ShowRegisterTableModel.addRow(tableData);
                
            }
            
//            ShowRegisterTable.setAutoCreateRowSorter(true);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void initEmployeeStats() {
        
        DefaultTableModel EmployeeStatsTableModel = initEmployeeStatsTableModel();
        
        String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
        String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();
        
        try {
            
            
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT *,date_format(FromDateSent,'%d-%m-%y') AS FDS, "
                    + "date_format(ToDateReceived,'%d-%m-%y') AS TDR "
                    + "FROM letterinwardregister "
                    + "WHERE ToBranch = '"+branch+"' AND "
                    + "ToName = '"+toName+"'";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()) {
                String InwardNo = rs.getString("InwardNo");
                String WorksheetNo = rs.getString("WorksheetNo");
                String FromNo = rs.getString("FromNo");
                String FromDateSent = rs.getString("FDS");
                String FromName = rs.getString("FromName");
                String Subject = rs.getString("Subject");
                String ToDateReceived = rs.getString("TDR");
                String OutDate = rs.getString("OutDate");
                String Remark = rs.getString("Remark");
                String Progress = rs.getString("Progress");
//                String Days = rs.getString("Days");
                
                String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, FromName, 
                    Subject, ToDateReceived, OutDate, Remark, Progress};
            
                EmployeeStatsTableModel.addRow(tableData);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private DefaultTableModel initEmployeeStatsTableModel() {
        DefaultTableModel EmployeeStatsTableModel  = new DefaultTableModel();
        EmployeeStatsTable.setModel(EmployeeStatsTableModel);
        EmployeeStatsTableModel.addColumn("Inward No");
        EmployeeStatsTableModel.addColumn("Worksheet");        
        EmployeeStatsTableModel.addColumn("From No");
        EmployeeStatsTableModel.addColumn("From Date");
        EmployeeStatsTableModel.addColumn("From Name");
        EmployeeStatsTableModel.addColumn("Subject");
        EmployeeStatsTableModel.addColumn("To Date");
        EmployeeStatsTableModel.addColumn("Out Date");
        EmployeeStatsTableModel.addColumn("Remark");
        EmployeeStatsTableModel.addColumn("Progress");
//        EmployeeStatsTableModel.addColumn("Days");
        
        EmployeeStatsTable.getTableHeader().setPreferredSize(
            new Dimension(EmployeeStatsTable.getColumnModel().getTotalColumnWidth(), 28));
        
        return EmployeeStatsTableModel;
    }
    
    private void initEmployeeStatsPeriodTable (String from, String to) {
        
        DefaultTableModel EmployeeStatsTableModel = initEmployeeStatsTableModel();
        
        String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
        String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();
        
        try {
            
            
            ConnectionEstablish con = new ConnectionEstablish();
            
            String sql = "SELECT *,date_format(FromDateSent,'%d-%m-%y') AS FDS, "
                    + "date_format(ToDateReceived,'%d-%m-%y') AS TDR, "
                    + "date_format(OutDate,'%d-%m-%y') AS OD "
                    + "FROM letterinwardregister "
                    + "WHERE ToBranch = '"+branch+"' AND "
                    + "ToName = '"+toName+"' AND "
                    + "ToDateReceived BETWEEN '"+from+"' AND '"+to+"'";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()) {
                String InwardNo = rs.getString("InwardNo");
                String WorksheetNo = rs.getString("WorksheetNo");
                String FromNo = rs.getString("FromNo");
                String FromDateSent = rs.getString("FDS");
                String FromName = rs.getString("FromName");
                String Subject = rs.getString("Subject");
                String ToDateReceived = rs.getString("TDR");
                String OutDate = rs.getString("OutDate");
                String Remark = rs.getString("Remark");
                String Progress = rs.getString("Progress");
//                String Days = rs.getString("Days");
                
                String tableData[] = {InwardNo, WorksheetNo, FromNo, FromDateSent, FromName, 
                    Subject, ToDateReceived, OutDate, Remark, Progress};
            
                EmployeeStatsTableModel.addRow(tableData);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void initTasks() {
        
        DefaultTableModel TasksTableModel  = new DefaultTableModel();
        TasksTable.setModel(TasksTableModel);
        TasksTableModel.addColumn("Employee ID");
        TasksTableModel.addColumn("Name");
        TasksTableModel.addColumn("Email");
        TasksTableModel.addColumn("Pending");
        TasksTableModel.addColumn("Completed");
        TasksTableModel.addColumn("Total");
        
        TasksTable.getTableHeader().setPreferredSize(
            new Dimension(TasksTable.getColumnModel().getTotalColumnWidth(), 28));
        
        String branch = BranchEmployeeStatsComboBox.getSelectedItem().toString();
        String toName = NameEmployeeStatsComboBox.getSelectedItem().toString();
        
        try {
            ConnectionEstablish con = new ConnectionEstablish();
            String sql = "SELECT * FROM letteremployee "
                    + "WHERE Branch = '"+branch+"' AND "
                    + "Name = '"+toName+"'";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while(rs.next()) {
                String ID = rs.getString("ID");
                String Name = rs.getString("Name");
                String Email = rs.getString("Email");
                String Pending = rs.getString("Pending");
                String Completed = rs.getString("Completed");
                String Total = rs.getString("Total");
                
                String tableData[] = {ID, Name, Email, Pending, Completed, Total};
            
                TasksTableModel.addRow(tableData);
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void showRegisterToggleSwitch() {
        
        TablesPane.setSelectedIndex(0);
        updownArrowToggleButton.setVisible(false);
        EmployeeStatsFilterPeriodPanel.setVisible(false);
        EmployeeStatsOptions.setVisible(false);
        
        if (ShowRegisterButton.isSelected()) {
            TablesPane.setVisible(true);
            ShowRegisterPanel.setVisible(true);
            EmployeeStatsButton.setSelected(false);
            updownArrowToggleButton.setVisible(true);
        }
        else {
            TablesPane.setVisible(false);
            ShowRegisterPanel.setVisible(false);
        }
    }
        
    private void employeeStatsToggleSwitch() { 
        TablesPane.setSelectedIndex(1);
        updownArrowToggleButton.setVisible(false);
        ShowRegisterPanel.setVisible(false);
        
        if (EmployeeStatsButton.isSelected()) {
            TablesPane.setVisible(true);
            EmployeeStatsOptions.setVisible(true);
            EmployeeStatsFilterPeriodPanel.setVisible(true);
            ShowRegisterButton.setSelected(false);
        }
        else {
            TablesPane.setVisible(false);
            EmployeeStatsOptions.setVisible(false);
            EmployeeStatsFilterPeriodPanel.setVisible(false);
        }
    }
    
    private void employeeStatsToggleSwitchMouse() {
        
        
        if (ShowRegisterButton.isSelected()) {
            TablesPane.setVisible(true);
            ShowRegisterPanel.setVisible(true);
            EmployeeStatsButton.setSelected(false);
            TablesPane.setSelectedIndex(0);
            updownArrowToggleButton.setVisible(true);
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            EmployeeStatsOptions.setVisible(false);
        }        
        else if (EmployeeStatsButton.isSelected()) {
            TablesPane.setVisible(true);
            EmployeeStatsOptions.setVisible(true);
            EmployeeStatsFilterPeriodPanel.setVisible(true);
            ShowRegisterButton.setSelected(false);
            TablesPane.setSelectedIndex(1);
            updownArrowToggleButton.setVisible(true);
            ShowRegisterPanel.setVisible(false);
        }
        else {
            TablesPane.setVisible(false);
            updownArrowToggleButton.setVisible(false);
            ShowRegisterPanel.setVisible(false);
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            EmployeeStatsOptions.setVisible(false);
        }
    }
    
    private void showRegisterToggleSwitchMouse() {
        
        
        if (EmployeeStatsButton.isSelected()) {
            TablesPane.setVisible(true);
            EmployeeStatsOptions.setVisible(true);
            EmployeeStatsFilterPeriodPanel.setVisible(true);
            ShowRegisterButton.setSelected(false);
            TablesPane.setSelectedIndex(1);
            updownArrowToggleButton.setVisible(false);
            ShowRegisterPanel.setVisible(false);
        }
        else if (ShowRegisterButton.isSelected()) {
            TablesPane.setVisible(true);
            ShowRegisterPanel.setVisible(true);
            EmployeeStatsButton.setSelected(false);
            TablesPane.setSelectedIndex(0);
            updownArrowToggleButton.setVisible(true);
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            EmployeeStatsOptions.setVisible(false);
        }        
        else {
            TablesPane.setVisible(false);
            updownArrowToggleButton.setVisible(false);
            ShowRegisterPanel.setVisible(false);
            EmployeeStatsFilterPeriodPanel.setVisible(false);
            EmployeeStatsOptions.setVisible(false);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ActionButtonsPanel;
    private javax.swing.JButton AddLetterButton;
    private javax.swing.JPanel AddLetterPanel;
    private javax.swing.JComboBox<String> BranchEmployeeStatsComboBox;
    private javax.swing.JButton DateReceivedShowTodayButton;
    private javax.swing.JButton DateSentShowTodayButton;
    private javax.swing.JToggleButton EmployeeStatsButton;
    private javax.swing.JPanel EmployeeStatsFilterPeriodPanel;
    private javax.swing.JPanel EmployeeStatsOptions;
    private javax.swing.JPanel EmployeeStatsPane;
    private javax.swing.JScrollPane EmployeeStatsScrollPane;
    private javax.swing.JTable EmployeeStatsTable;
    private javax.swing.JButton ExportButton;
    private javax.swing.JTextField FromDateField;
    private javax.swing.JLabel FromDateLabel;
    private javax.swing.JTextField FromLetterNoField;
    private javax.swing.JLabel FromLetterNoLabel;
    private javax.swing.JTextField FromNameField;
    private javax.swing.JLabel FromNameLabel;
    private javax.swing.JPanel FromPanel;
    private javax.swing.JTextField FromPeriodField;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel HeadingLabel;
    private javax.swing.JPanel HeadingPanel;
    private javax.swing.JTextField InwardRegisterNoField1;
    private javax.swing.JLabel InwardRegisterNoLabel1;
    private javax.swing.JPanel InwardRegisterNumberPanel;
    private javax.swing.JComboBox<String> NameEmployeeStatsComboBox;
    private javax.swing.JTextField OutDateField;
    private javax.swing.JLabel OutDateLabel;
    private javax.swing.JButton OutDateShowTodayButton;
    private javax.swing.JTextField ProgressField;
    private javax.swing.JLabel ProgressLabel;
    private javax.swing.JButton RefreshShowRegisterButton;
    private javax.swing.JTextField RemarkField;
    private javax.swing.JLabel RemarkLabel;
    private javax.swing.JButton ShowButton;
    private javax.swing.JScrollPane ShowDirectoryScrollPane;
    private javax.swing.JButton ShowLetterInfoButton1;
    private javax.swing.JToggleButton ShowRegisterButton;
    private javax.swing.JPanel ShowRegisterPanel;
    private javax.swing.JComboBox<String> ShowRegisterSortByComboBox;
    private javax.swing.JTable ShowRegisterTable;
    private javax.swing.JButton SignoutButton;
    private javax.swing.JComboBox<String> SortByEmployeeStatsComboBox;
    private javax.swing.JTextField SubjectField;
    private javax.swing.JLabel SubjectLabel;
    private javax.swing.JPanel SubjectPanel;
    private javax.swing.JPanel SubjectPanel1;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JTabbedPane TablesPane;
    private javax.swing.JScrollPane TasksScrollPane;
    private javax.swing.JTable TasksTable;
    private javax.swing.JComboBox<String> ToBranchComboBox;
    private javax.swing.JLabel ToBranchLabel;
    private javax.swing.JTextField ToDateReceivedField;
    private javax.swing.JLabel ToDateReceivedLabel;
    private javax.swing.JLabel ToDateReceivedLabel2;
    private javax.swing.JComboBox<String> ToNameComboBox;
    private javax.swing.JLabel ToNameLabel;
    private javax.swing.JPanel ToPanel;
    private javax.swing.JTextField ToPeriodField;
    private javax.swing.JLabel ToPeriodLabel;
    private javax.swing.JTextField WorksheetNoField;
    private javax.swing.JLabel WorksheetNoLabel;
    private javax.swing.JToggleButton updownArrowToggleButton;
    // End of variables declaration//GEN-END:variables
}
