package tb;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
 
/**
 *
 * @author Lenovo
 */
public class BranchUpdateDirectory extends javax.swing.JFrame {

    /**
     * Creates new form BranchUpdateDirectory
     */
    public BranchUpdateDirectory() {
        setFrame();
        initComponents();
        DisplayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HeaderPanel = new javax.swing.JPanel();
        UpdateDirectoryLabel = new javax.swing.JLabel();
        BodyPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UpdateDirectoryTable = new javax.swing.JTable();
        FooterPanel = new javax.swing.JPanel();
        BackButton = new javax.swing.JButton();
        CompleteButton = new javax.swing.JButton();
        FeedbackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(300, 125, 900, 600));
        setMaximumSize(new java.awt.Dimension(900, 600));
        setMinimumSize(new java.awt.Dimension(900, 600));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setSize(new java.awt.Dimension(900, 600));

        HeaderPanel.setBackground(new java.awt.Color(232, 246, 239));
        HeaderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        HeaderPanel.setPreferredSize(new java.awt.Dimension(800, 70));

        UpdateDirectoryLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        UpdateDirectoryLabel.setText("Update Directory");

        javax.swing.GroupLayout HeaderPanelLayout = new javax.swing.GroupLayout(HeaderPanel);
        HeaderPanel.setLayout(HeaderPanelLayout);
        HeaderPanelLayout.setHorizontalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addContainerGap(362, Short.MAX_VALUE)
                .addComponent(UpdateDirectoryLabel)
                .addContainerGap(362, Short.MAX_VALUE))
        );
        HeaderPanelLayout.setVerticalGroup(
            HeaderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(UpdateDirectoryLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BodyPanel.setBackground(new java.awt.Color(232, 246, 239));
        BodyPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BodyPanel.setPreferredSize(new java.awt.Dimension(0, 480));

        UpdateDirectoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Letter ID", "From", "Subject", "Received", "Progress", "Feedback", "Complete"
            }
        ));
        jScrollPane1.setViewportView(UpdateDirectoryTable);

        javax.swing.GroupLayout BodyPanelLayout = new javax.swing.GroupLayout(BodyPanel);
        BodyPanel.setLayout(BodyPanelLayout);
        BodyPanelLayout.setHorizontalGroup(
            BodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BodyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BodyPanelLayout.setVerticalGroup(
            BodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BodyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        FooterPanel.setBackground(new java.awt.Color(232, 246, 239));
        FooterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        CompleteButton.setText("Complete");
        CompleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompleteButtonActionPerformed(evt);
            }
        });

        FeedbackButton.setText("Feedback");
        FeedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FooterPanelLayout = new javax.swing.GroupLayout(FooterPanel);
        FooterPanel.setLayout(FooterPanelLayout);
        FooterPanelLayout.setHorizontalGroup(
            FooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FooterPanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FeedbackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CompleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );
        FooterPanelLayout.setVerticalGroup(
            FooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FooterPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(FooterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FeedbackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CompleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HeaderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .addComponent(BodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .addComponent(FooterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(HeaderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(BodyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(FooterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setFrame(){
        
        URL iconURL = getClass().getResource("/img-src/logo.png");
        // iconURL is null when not found
        ImageIcon icon = new ImageIcon(iconURL);
        setIconImage(icon.getImage());
        setTitle("Water Resources Department, Government of Maharashtra, India");
        setBounds(300, 125, 900, 600);
    }
    
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        this.setVisible(false);
        new BranchHome().setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void FeedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackButtonActionPerformed
         
//  letterArray
//      >>  CREATING AN EMPTY ARRAYLIST
        ArrayList<Integer> letterArray = new ArrayList<>();
        
//      >>  ENTERING THE CHECKED ACKNOWLEDGED LETTERS INTO THE EMPTY ARRAYLIST CREATED
        for(int i=0;i<UpdateDirectoryTable.getRowCount();i++) {
          Boolean checked=Boolean.valueOf(UpdateDirectoryTable.getValueAt(i, 5).toString());
          //DISPLAY
          if(checked) {
              String FeedbackLetterIDstring = UpdateDirectoryTable.getValueAt(i, 0).toString();
              int FeedbackLetterIDinteger = Integer.parseInt(FeedbackLetterIDstring);
              letterArray.add(FeedbackLetterIDinteger);
          }
        }
        
//      >>  TAKING FEEDBACKS OF SELECTED LETTERS
        ArrayList<String> FeedbackArray = new ArrayList<>();
        for(int i = 0; i < letterArray.size(); i++) {
            String feed = JOptionPane.showInputDialog(null,"Enter Feedback for LetterID:"+letterArray.get(i));
            FeedbackArray.add(feed);
        }
        
        try {
            
//          >>  1. ESTABLISHING CONNECTION WITH SQL DATABASE
            ConnectionEstablish con = new ConnectionEstablish();
                        
            for(int i = 0; i < letterArray.size(); i++) {

//              >> 2. UPDATING THE FEEDBACK IN THE SQL DB   
                String sql = "UPDATE inwardregister SET Feedback = '"+FeedbackArray.get(i)+"' "
                        + "WHERE LetterID = '"+letterArray.get(i).toString()+"'";
                PreparedStatement st = con.c.prepareStatement(sql);
                int j = st.executeUpdate();
                if (j > 0){
                    System.out.println(letterArray.get(i)+" Feedback Done");
                }
            }
            
        } catch (HeadlessException | SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_FeedbackButtonActionPerformed

    private void CompleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompleteButtonActionPerformed
               
//  letterArray
//      >>  CREATING AN EMPTY ARRAYLIST

//      >>  letterArray: TO STORE LETTER IDS
        ArrayList<Integer> letterArray = new ArrayList<>();
//      >>  countDays: TO STORE THE DAYS TAKEN TO COMPLETE THE WORK
        ArrayList<Integer> countDays = new ArrayList<>();
        
                
//      >>  date: GETTING TODAY'S DATE AND STORING IT IN DATE
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String date = LocalDate.now().format(formatter);   
        
//      >>  ENTERING THE CHECKED LETTERS' LETTER IDS INTO THE letterArray
        for(int i=0;i<UpdateDirectoryTable.getRowCount();i++) {
            
//          >>  Which Boxes Are Checked?
            Boolean checked=Boolean.valueOf(UpdateDirectoryTable.getValueAt(i, 6).toString());
          
            if(checked) {
                
//              >>  a.  Getting Letter ID of checked box  
                String FeedbackLetterIDstring = UpdateDirectoryTable.getValueAt(i, 0).toString();
//              >>  b.  Converting the String Letter ID to Integer Letter ID
                int FeedbackLetterIDinteger = Integer.parseInt(FeedbackLetterIDstring);
//              >>  c.  Adding the Integer Letter ID to letterArray  
                letterArray.add(FeedbackLetterIDinteger);
//              >>  d.  Getting DateReceived from the table
                String received = (String) UpdateDirectoryTable.getModel().getValueAt(i, 3);
//              >>  e.  Counting the days it required to complete the work using
//                      eDateReceived & eDateCompleted
                countDays.add((int)CalculateDaysFunction(received, date));
                
            }
          
        }
        
//      >> STORING THE COUNT OF CHECKED BOXES     
        int checkedBoxesSize = letterArray.size();

        for(int j=0; j<checkedBoxesSize; j++) {
            
//          >>  1.  ESTABLISHING CONNECTION WITH SQL DATABASE
                ConnectionEstablish con = new ConnectionEstablish();
            
            try {                         
//              >>  2.  SQL STATEMENT   
                String sql = "UPDATE inwardregister "
                        + "SET Progress = 'Completed', "
                        + "Acknowledgement = '2', "
                        + "eDateCompleted = '"+date+"', "
                        + "CompletedInDays = '"+countDays.get(j)+"'"
                        + "WHERE LetterID = '"+letterArray.get(j)+"'";
//              >>  3.  PREPARING THE STATEMENT
                PreparedStatement st = con.c.prepareStatement(sql);
//              >>  4.  EXECUTING THE STATEMENT  
                int i = st.executeUpdate();
                if (i > 0){
                    JOptionPane.showMessageDialog(null, "Successfully Updated. LetterID = "+letterArray.get(j));
                }
                else{}
                
                //  >>  READING THE BRANCH AND STORING IT IN BRANCH AND TOEMPLOYEE VARIABLES  
                BufferedReader br;
                String branch;
                String name;
                try {
                    br = new BufferedReader(new FileReader("login.txt"));
                    String text = br.readLine();
                    //  branch:          
                    branch = text.split(",")[0];
                    //  Name Of Employee:          
                    name = text.split(",")[1]; 
                    String sql2= "UPDATE letter.employee "
                        + "SET PendingTasks = PendingTasks - 1, "
                        + "CompletedTasks = CompletedTasks + 1 WHERE "
                        + "branch='"+branch+"' AND name='"+name+"'";
                    PreparedStatement st2 = con.c.prepareStatement(sql2);
                    int z = st2.executeUpdate();
                    if (z > 0){
                        JOptionPane.showMessageDialog(null, "Successfully Added Pending");
                    }
                    else{}
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                

                
            } catch (HeadlessException | SQLException e) {
                e.printStackTrace();
            }
            
        }
        
        this.setVisible(false);
        new BranchUpdateDirectory().setVisible(true);
        
    }//GEN-LAST:event_CompleteButtonActionPerformed

    private long CalculateDaysFunction(String date1, String date2) {
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MM yyyy");
        date1 = date1.replace('-',' ');
        date2 = date2.replace('-',' ');

        LocalDate LDdate1 = LocalDate.parse(date1, dtf);
        LocalDate LDdate2 = LocalDate.parse(date2, dtf);

        long daysBetween = ChronoUnit.DAYS.between(LDdate1, LDdate2);
        return daysBetween;
    }
    
    
    /**
     * @param args the command line arguments
     */
    
    
    private void DisplayTable() {
        
//      >>  CREATING DEFAULT TABLE MODEL -> {STRING, STRING, STRING, BOOLEAN}
        DefaultTableModel UpdateDirectoryTableModel  = new DefaultTableModel(){
            @Override
            public Class<?> getColumnClass(int column) {
                switch(column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        return String.class;
                    case 3:
                        return String.class;
                    case 4:
                        return String.class;
                    case 5:
                        return Boolean.class;
                    case 6:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }
        
        };
        
//      >>  ADDING THE TABLE MODEL TO THE TABLE
        UpdateDirectoryTable.setModel(UpdateDirectoryTableModel);
        
//      >>  ADDING THE COLUMNS
        UpdateDirectoryTableModel.addColumn("Letter ID");
        UpdateDirectoryTableModel.addColumn("From");
        UpdateDirectoryTableModel.addColumn("Subject");
        UpdateDirectoryTableModel.addColumn("Received");
        UpdateDirectoryTableModel.addColumn("Progress");
        UpdateDirectoryTableModel.addColumn("Feedback");
        UpdateDirectoryTableModel.addColumn("Complete");
        
        
        try{
            
//          >>  READING THE BRANCH AND STORING IT IN BRANCH AND TOEMPLOYEE VARIABLES  
            BufferedReader br = new BufferedReader(new FileReader("login.txt"));
            String text = br.readLine();
//  branch:          
            String branch = text.split(",")[0];
//  toEmployee:          
            String toEmployee = text.split(",")[1];            
            
//          >>  1. ESTABLISHING CONNECTION WITH SQL DATABASE
            ConnectionEstablish con = new ConnectionEstablish();
            
//          >>  2. DISPLAYING PENDING/NEW LETTERS ASSIGNED TO THE EMPLOYEE
            String sql = "SELECT * FROM inwardregister WHERE "
                    + "Branch='"+branch+"' AND ToEmployee='"+toEmployee+"'"
                    + "AND Acknowledgement=1 ORDER BY cDateSent DESC";
            PreparedStatement st = con.c.prepareStatement(sql);
            ResultSet rs = st.executeQuery(sql);
            
//          >>  3. ENTERING THE VALUES IN THE TABLE
            int i=0;
            while(rs.next()){
                String LetterID = String.valueOf(rs.getInt("LetterID"));
                String From = rs.getString("Fr");
                String Subject = rs.getString("Subject");
                String Received = rs.getString("eDateReceived");
                String Progress = rs.getString("Progress");
                
                
                
//              >>  ADDING A ROW TO THE TABLE
                UpdateDirectoryTableModel.addRow(new Object[7]);
                
//              >>  model.setValueAt(string to display on table, row, column);
                UpdateDirectoryTableModel.setValueAt(LetterID, i, 0);
                UpdateDirectoryTableModel.setValueAt(From, i, 1);
                UpdateDirectoryTableModel.setValueAt(Subject, i, 2);
                UpdateDirectoryTableModel.setValueAt(Received, i, 3);
                UpdateDirectoryTableModel.setValueAt(Progress, i, 4);
                UpdateDirectoryTableModel.setValueAt(false,i, 5);
                UpdateDirectoryTableModel.setValueAt(false,i, 6);
                i = i + 1;
            }
            
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BranchUpdateDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BranchUpdateDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BranchUpdateDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BranchUpdateDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BranchUpdateDirectory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JPanel BodyPanel;
    private javax.swing.JButton CompleteButton;
    private javax.swing.JButton FeedbackButton;
    private javax.swing.JPanel FooterPanel;
    private javax.swing.JPanel HeaderPanel;
    private javax.swing.JLabel UpdateDirectoryLabel;
    private javax.swing.JTable UpdateDirectoryTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
